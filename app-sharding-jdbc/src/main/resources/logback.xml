<?xml version="1.0" encoding="UTF-8"?>
<!--
中文文档：http://www.logback.cn
-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
-           当scan为true时，此属性生效。默认的时间间隔为1分钟
-debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-
- configuration 子节点为 appender、logger、root
-->
<configuration scan="false" scanPeriod="60 second" debug="true">
    <property name="APP_NAME" value="${app.name:-app-sharding-jdbc}"/>>
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="${CATALINA_HOME:-.}/logs"/>
    <property name="CONSOLE_ENCODING" value="${console.encoding:-UTF-8}"/>
    <contextName>${APP_NAME}</contextName>

    <!-- 负责写日志,控制台日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 一是把日志信息转换成字节数组,二是把字节数组写入到输出流 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <pattern>%highlight(%d{HH:mm:ss.SSS} %5level %50logger{50} [%X{rid}-%X{req.remoteHost}] : %m%n)</pattern>
            <charset>${CONSOLE_ENCODING}</charset>
        </encoder>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="APP" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${APP_NAME}.log</file>
        <!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>-->
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %5level %50logger{50} [%X{rid}-%X{req.remoteHost}] : %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--
            - 每天至少生成一个日志文件，超过 200M 则增加一个文件，最多保存 1000 个日志文件
            - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。
            -->
            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%d{yyyyMMdd}_%i.log</fileNamePattern>
            <maxHistory>100</maxHistory>
            <maxFileSize>500MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!--
    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类
    - 2.未设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”
    - 3.未设置additivity，默认为true，将此logger的打印信息向上级传递；
    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，
    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；
    -->
    <!--<logger name="ch.qos.logback"/ >-->
    <!--
        <logger name="org.hibernate.type.EnumType" level="TRACE" />
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" />
        <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="DEBUG" />
        <logger name="org.hibernate.SQL" level="TRACE" />
        <logger name="org.hibernate.engine.QueryParameters" level="DEBUG" />
        <logger name="org.hibernate.engine.query.HQLQueryPlan" level="DEBUG" />
        <logger name="org.hibernate.hql.internal" level="INFO" />
    -->
    <!-- 打印编译完成的sql语句 -->
    <logger name="org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl" level="DEBUG"/>
    <logger name="org.hibernate.engine.internal.TwoPhaseLoad" level="INFO"/>
    <logger name="org.hibernate.hql.internal.ast.QueryTranslatorImpl" level="INFO"/>
    <logger name="org.hibernate.loader.Loader" level="INFO"/>
    <!-- 打印 Controller 注册url -->
    <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="TRACE"/>
    <!-- 已经配置AOP拦截了，不需要再打印 Controller 返回的结果 -->
    <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor"
            level="INFO"/>
    <logger name="org.apache.commons.beanutils.converters.AbstractConverter" level="INFO"/>
    <logger name="com.zaxxer.hikari.pool.HikariPool" level="INFO"/>
    <logger name="org.mongodb.driver" level="INFO"/>
    <logger name="org.apache.commons.beanutils.converters" level="INFO"/>
    <!--<logger name="org.springframework.data.redis.core.RedisConnectionUtils" level="INFO"/>-->

    <!--
    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，在控制台中打出日志，
    -   不再向次logger的上级 <logger name="logback"/> 传递打印信息
    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
    -        如果未设置此属性，那么当前logger将会继承上级的级别。
    - 3.additivity：为false，表示此logger的打印信息不再向上级传递,如果设置为true，会打印两次
    - 4.appender-ref：指定了名字为"STDOUT"的appender。
    -->
    <!--<logger name="com.weizhi.mvc.LogMain" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
        &lt;!&ndash;<appender-ref ref="DEBUG"/>&ndash;&gt;
        &lt;!&ndash;<appender-ref ref="EXCEPTION"/>&ndash;&gt;
        &lt;!&ndash;<appender-ref ref="INFO"/>&ndash;&gt;
        &lt;!&ndash;<appender-ref ref="ERROR"/>&ndash;&gt;
        <appender-ref ref="ASYNC"/>
    </logger>-->
    <!-- 指定文件记录 sql 语句 -->
    <logger name="druid.sql.Statement" level="DEBUG" additivity="false">
        <appender-ref ref="APP"/>
    </logger>
    <!--
        <logger name="org.hibernate.SQL" level="DEBUG" additivity="false">
            <appender-ref ref="APP"/>
        </logger>
        <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE" additivity="false">
            <appender-ref ref="APP"/>
        </logger>
    -->

    <!--
    - 根logger
    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    -       默认是DEBUG。
    -appender-ref:可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
    -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="APP"/>
    </root>
</configuration>