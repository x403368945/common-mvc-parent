<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.ccx</groupId>
    <artifactId>common-mvc-parent</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>
    <!-- spring-boot 特殊处理：pom 文件与mvc差别较大 -->
    <modules>
        <module>common-utils</module><!-- 工具类封装 -->
        <module>common-mvc</module><!-- Spring MVC 封装 -->
        <module>demo-security</module><!-- Spring Security 基本应用【参考案例，独立运行】 -->
        <module>demo-socket</module><!-- Spring Socket 基本应用【参考案例，独立运行】 -->
        <module>demo-main</module><!-- 应用入口【独立运行，可选依赖[demo-service]】 -->
        <module>demo-service</module><!-- 参考案例【必须依赖[demo-main]】 -->
        <module>demo-deploy</module><!-- 组合打包所有发布模块，避免出现循环依赖 -->
    </modules>

    <profiles>
        <profile> <!-- 本地开发环境 -->
            <id>dev</id>
            <!-- 设置默认激活配置 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <env>dev</env>
            </properties>
        </profile>
        <profile> <!-- 测试环境 -->
            <id>beta</id>
            <!--<activation><activeByDefault>true</activeByDefault></activation>-->
            <properties>
                <env>beta</env>
            </properties>
        </profile>
        <profile> <!-- 生产环境 -->
            <id>prod</id>
            <!--<activation><activeByDefault>true</activeByDefault></activation>-->
            <properties>
                <env>prod</env>
            </properties>
        </profile>
    </profiles>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <querydsl.version>4.2.1</querydsl.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.1.2.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.querydsl/querydsl-mongodb -->
            <dependency>
                <groupId>com.querydsl</groupId>
                <artifactId>querydsl-mongodb</artifactId>
                <version>${querydsl.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.mongodb.morphia/morphia -->
            <dependency> <!-- mongodb 可选的查询框架 -->
                <groupId>org.mongodb.morphia</groupId>
                <artifactId>morphia</artifactId>
                <version>1.3.2</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!--
            下载 common-utils 源码到 common-mvc-parent 目录
            以下是 common-utils 源码地址，任选一个即可
            https://gitee.com/xcc/common-utils
            https://github.com/x403368945/common-utils
        -->
        <dependency>
            <groupId>com.utils</groupId>
            <artifactId>common-utils</artifactId>
            <version>1.0.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.4</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>jackson-databind</artifactId>
                    <groupId>com.fasterxml.jackson.core</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.3</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-test -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <version>5.1.2.RELEASE</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <!--<finalName>${artifactId}</finalName>--> <!--build目标文件的文件名，默认情况下为${artifactId}-${version}；-->
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <targetPath>${basedir}/target/classes</targetPath>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <targetPath>${basedir}/target/test-classes</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>*.properties</include>
                    <include>*.yml</include>
                </includes>
            </resource>
            <resource> <!-- 指定必须编译打包的资源文件 -->
                <directory>${basedir}/src/main/resources/env/${env}</directory>
                <targetPath>${basedir}/target/classes</targetPath>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources/env/${env}</directory>
                <targetPath>${basedir}/target/test-classes</targetPath>
                <filtering>true</filtering>
                <!-- 排除不打包的文件 -->
                <!--
                <excludes>
                    <exclude>logback.xml</exclude>
                </excludes>
                -->
            </resource>
            <!--<resource>
                <directory>src/demo/static</directory>&lt;!&ndash; 将静态资源复制到编译目录下 &ndash;&gt;
                <targetPath>${basedir}/target/${artifactId}-${version}/static/</targetPath>
                &lt;!&ndash;<targetPath>${basedir}/target/classes/static/</targetPath>&ndash;&gt;
                <filtering>true</filtering>
            </resource>-->
        </resources>
        <plugins>
<!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>org.springframework.ccx.loader.PropertiesLauncher</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
-->
            <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-maven-plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.1.2.RELEASE</version>
                <configuration>
                    <skip>true</skip>
                    <fork>true</fork> <!-- devtools 热启动配置 -->
                    <addResources>true</addResources>
                </configuration>
                <!--<executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>&lt;!&ndash;可以把依赖的包都打包到生成的Jar包中&ndash;&gt;
                        </goals>
                    </execution>
                </executions>-->
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-failsafe-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.1</version>
                <configuration>
                    <skip>true</skip><!-- 跳过单元测试 -->
                </configuration>
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <skip>true</skip>
                    <!--<compilerArgs>
                        <arg>-extdirs</arg>
                        <arg>${basedir}/src/demo/static/*</arg>
                    </compilerArgs>-->
                </configuration>
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-source-plugin -->
            <plugin> <!-- 默认打包源码 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-war-plugin -->
                <plugin> <!-- war 包插件 -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.2.2</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
                <!-- https://mvnrepository.com/artifact/com.mysema.maven/apt-maven-plugin -->
                <plugin>
                    <!--
                      该插件可以生成 querydsl 需要的查询对象，运行 mvn compile 即可
                      参考地址：http://www.querydsl.com/static/querydsl/4.1.3/reference/html_single/#jpa_integration
                    -->
                    <groupId>com.mysema.maven</groupId>
                    <artifactId>apt-maven-plugin</artifactId>
                    <version>1.1.3</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>process</goal>
                            </goals>
                            <configuration>
                                <!--警告：需要将 target/generated-sources/java 设置为 Generated Sources Root -->
                                <outputDirectory>target/generated-sources/java</outputDirectory>
                                <processors>
                                    <!-- 只支持 @Entity 注解的类，生成Q{ClassName}.java -->
                                    <!--<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>-->
                                    <!-- 可以将所有 @Entity @Document 注解的类，生成Q{ClassName}.java，同时会将这些类中引用的类也生成 Q{ClassName}.java ；但是类属性不支持 @QueryTransient 注解 -->
                                    <!--<processor>org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor</processor>-->
                                    <!-- 只支持 @QueryEntity 注解的类，生成Q{ClassName}.java，可通过 @QueryTransient 指定生成 Q{ClassName}.java 时忽略类属性；可选择性的生成 Q{ClassName}.java，不需要的类不加 @QueryEntity 即可，控制性比较高 -->
                                    <processor>com.querydsl.apt.QuerydslAnnotationProcessor</processor>
                                </processors>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- https://mvnrepository.com/artifact/com.querydsl/querydsl-maven-plugin -->
                <!--
                <plugin>
                    <groupId>com.querydsl</groupId>
                    <artifactId>querydsl-maven-plugin</artifactId>
                    <version>${project.version}</version>
                    <executions>
                        <execution>com.mysema.maven
                            <goals>
                                <goal>export</goal>
                            </goals>
                            <configuration>
                                <targetFolder>target/generated-sources/java</targetFolder>
                                <packageName></packageName>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <jdbcDriver>org.h2.Driver</jdbcDriver>
                        <jdbcUrl>jdbc:h2:mem:;INIT=runscript from 'file:${project.baseUri}/src/demo/sql/001_schema.sql'</jdbcUrl>
                        <jdbcUser>sa</jdbcUser>
                        <customTypes>
                            <customType>com.querydsl.sql.types.DateTimeType</customType>
                            <customType>com.querydsl.sql.types.LocalDateType</customType>
                        </customTypes>
                        <packageName>com.querydsl.demo.sql</packageName>
                        <targetFolder>${project.basedir}/target/generated-sources/java</targetFolder>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>com.h2database</groupId>
                            <artifactId>h2</artifactId>
                            <version>${h2.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                -->
                <!-- https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin -->
                <!--
                            <plugin>
                                <groupId>org.eclipse.jetty</groupId>
                                <artifactId>jetty-maven-plugin</artifactId>
                                <version>9.4.12.v20180830</version>
                            </plugin>
                -->
            </plugins>
        </pluginManagement>
    </build>
</project>