<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.ccx.parent</groupId>
    <artifactId>common-mvc-parent</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>

    <!-- spring-boot 特殊处理：pom 文件与mvc差别较大 -->
    <modules>
        <module>common-utils</module><!-- 工具类封装 -->
        <module>common-mvc</module><!-- Spring MVC 封装 -->
        <module>demo-main</module><!-- 应用入口【独立运行，可选依赖[demo-service]】 -->
        <module>demo-service</module><!-- 参考案例【必须依赖[demo-main]】 -->
        <module>app-security</module><!-- Spring Security 基本应用【参考案例，独立运行】 -->
        <module>app-socket</module><!-- Spring Socket 基本应用【参考案例，独立运行】 -->
        <module>app-demo</module><!-- 组合打包所有发布模块，避免出现循环依赖 -->
        <module>app-demo-main</module><!-- 单独打包发布 -->
        <module>app-demo-service</module><!-- 单独打包发布 -->
        <module>app-db-master-slave</module>
        <module>app-sharding-jdbc</module><!-- 单独打包发布 -->
    </modules>

    <profiles>
        <profile> <!-- 本地开发环境 -->
            <id>dev</id>
            <!-- 设置默认激活配置 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <env>dev</env>
            </properties>
        </profile>
        <!--
                <profile> &lt;!&ndash; 本地 windows 开发环境 &ndash;&gt;
                    <id>windows</id>
                    <properties>
                        <env>windows</env>
                    </properties>
                    &lt;!&ndash; 设置 windows 环境激活这个配置 &ndash;&gt;
                    <activation>
                        <os>
                            <name>Windows</name>
                            <family>Windows</family>
                        </os>
                    </activation>
                </profile>
        -->
        <profile> <!-- 测试环境 -->
            <id>beta</id>
            <properties>
                <env>beta</env>
            </properties>
            <!-- build -> plugins 可以写在 project ，但是开发环境不需要挂起 antrun 插件，只有在按环境打包时需要 -->
            <!--<build>
                <plugins>
                    &lt;!&ndash; 使用AntRun插件，因为此插件能绑定Maven生命周期阶段，并通过Ant的标签即可输出信息、复制文件等&ndash;&gt;
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <phase>compile</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <echo>Using Environment : ${env}</echo> &lt;!&ndash; 复制文件文件夹 &ndash;&gt;
                                        <copy todir="${project.build.outputDirectory}" overwrite="true">
                                            <fileset dir="src/demo/resources/${env}"/>
                                        </copy>
                                        &lt;!&ndash;
                                        <echo>Using ${env}/application.properties</echo> &lt;!&ndash; 复制单个文件 &ndash;&gt;
                                        <copy file="src/demo/resources/${env}/application.properties" tofile="${project.build.outputDirectory}/application.properties" overwrite="true"/>
                                        &ndash;&gt;
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>-->
        </profile>
        <profile> <!-- 生产环境 -->
            <id>prod</id>
            <properties>
                <env>prod</env>
            </properties>
            <!-- build -> plugins 可以写在 project ，但是开发环境不需要挂起 antrun 插件，只有在按环境打包时需要 -->
            <!--<build>
                <plugins>
                    &lt;!&ndash; 使用AntRun插件，因为此插件能绑定Maven生命周期阶段，并通过Ant的标签即可输出信息、复制文件等&ndash;&gt;
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                </plugins>
            </build>-->
        </profile>
    </profiles>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <springboot.version>2.2.1.RELEASE</springboot.version>
        <querydsl.version>4.2.2</querydsl.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${springboot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.querydsl/querydsl-mongodb -->
            <dependency>
                <groupId>com.querydsl</groupId>
                <artifactId>querydsl-mongodb</artifactId>
                <version>${querydsl.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.mongodb.morphia/morphia -->
            <dependency> <!-- mongodb 可选的查询框架 -->
                <groupId>org.mongodb.morphia</groupId>
                <artifactId>morphia</artifactId>
                <version>1.3.2</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.ccx.utils.parent</groupId>
            <artifactId>common-utils</artifactId>
            <version>1.0.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.10</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>jackson-databind</artifactId>
                    <groupId>com.fasterxml.jackson.core</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.4</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-test -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <version>5.2.1.RELEASE</version>
            <scope>test</scope>
        </dependency>
            <!-- 打包发布时起作用：支付宝 sdk 集成；需要手动安装支付宝 sdk jar包到 maven 仓库，参考: /src/test/files/libs/README.md -->
            <!--<dependency>
                <groupId>com.alipay.api</groupId>
                <artifactId>alipay-sdk</artifactId>
                <version>20180104135026</version>
            </dependency>-->
            <!-- 编译时起作用：支付宝 sdk 集成；由于mvn install:install-file 命令安装 sdk jar包之后，maven 打包时可以检测到依赖，但编译时检测不到依赖，所以编译时使用这个依赖，打包时使用上面的依赖 -->
            <!--<dependency>
                <groupId>com.alipay.api</groupId>
                <artifactId>sdk</artifactId>
                <version>20180104135026</version>
                <scope>system</scope>
                <systemPath>${project.basedir}/src/test/files/libs/alipay-sdk-java20180104135026.jar</systemPath>
            </dependency>-->
    </dependencies>
    <build>
        <!--<finalName>${artifactId}</finalName>--> <!--build目标文件的文件名，默认情况下为${artifactId}-${version}；-->
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <targetPath>${basedir}/target/classes</targetPath>
                <filtering>true</filtering> <!-- 开启 filtering 会替换静态资源（html|js|...）中使用 ${key:属性名} 占位的属性，可以定义在 pom.xml -> properties -> key  -->
                <excludes> <!-- 经过maven的filter，会破坏font文件的二进制文件格式，到前台解析出错 -->
                    <exclude>static/**</exclude>
                    <!--<exclude>*-web/**</exclude>-->
                    <exclude>*.eot</exclude>
                    <exclude>*.ttf</exclude>
                    <exclude>*.woff</exclude>
                    <exclude>*.woff2</exclude>
                    <exclude>*.svg</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <targetPath>${basedir}/target/classes</targetPath>
                <filtering>false</filtering>
                <includes> <!-- 单独处理字体文件 -->
                    <include>static/**</include>
                    <!--<include>*-web/**</include>-->
                    <include>*.eot</include>
                    <include>*.ttf</include>
                    <include>*.woff</include>
                    <include>*.woff2</include>
                    <include>*.svg</include>
                </includes>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <targetPath>${basedir}/target/test-classes</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>*.properties</include>
                    <include>*.yml</include>
                </includes>
            </resource>
            <resource> <!-- 指定必须编译打包的资源文件 -->
                <directory>${basedir}/src/main/resources/env/${env}</directory>
                <targetPath>${basedir}/target/classes</targetPath>
                <filtering>true</filtering>
            </resource>
            <resource>
                <directory>${basedir}/src/main/resources/env/${env}</directory>
                <targetPath>${basedir}/target/test-classes</targetPath>
                <filtering>true</filtering>
                <!-- 排除不打包的文件 -->
                <!--
                <excludes>
                    <exclude>logback.xml</exclude>
                </excludes>
                -->
            </resource>
            <!--<resource>
                <directory>src/demo/static</directory>&lt;!&ndash; 将静态资源复制到编译目录下 &ndash;&gt;
                <targetPath>${basedir}/target/${artifactId}-${version}/static/</targetPath>
                &lt;!&ndash;<targetPath>${basedir}/target/classes/static/</targetPath>&ndash;&gt;
                <filtering>true</filtering>
            </resource>-->
        </resources>
        <plugins>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-failsafe-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <skip>true</skip><!-- 跳过单元测试 -->
                </configuration>
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <skip>true</skip>
                    <!--<compilerArgs>
                        <arg>-extdirs</arg>
                        <arg>${basedir}/src/demo/static/*</arg>
                    </compilerArgs>-->
                </configuration>
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.codehaus.mojo/build-helper-maven-plugin -->
            <plugin> <!-- 解决 IDEA 需要手动标记 target/generated-sources/java 目录问题 -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/java</source>
                                <source>${project.build.directory}/*/generated-sources/java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-maven-plugin -->
                <plugin> <!-- war 包插件 -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${springboot.version}</version>
                </plugin>
                <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-war-plugin -->
                <plugin> <!-- war 包插件 -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.2.3</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
                <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-source-plugin -->
                <plugin> <!-- 打包源码 -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.2.0</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- https://mvnrepository.com/artifact/com.mysema.maven/apt-maven-plugin -->
                <plugin>
                    <!--
                      该插件可以生成 querydsl 需要的查询对象，运行 mvn compile 即可
                      参考地址：http://www.querydsl.com/static/querydsl/4.1.3/reference/html_single/#jpa_integration
                    -->
                    <groupId>com.mysema.maven</groupId>
                    <artifactId>apt-maven-plugin</artifactId>
                    <version>1.1.3</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>process</goal>
                            </goals>
                            <configuration>
                                <!--警告：需要将 target/generated-sources/java 设置为 Generated Sources Root -->
                                <outputDirectory>target/generated-sources/java</outputDirectory>
                                <processors>
                                    <!-- 只支持 @Entity 注解的类，生成Q{ClassName}.java -->
                                    <!--<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>-->
                                    <!-- 可以将所有 @Entity @Document 注解的类，生成Q{ClassName}.java，同时会将这些类中引用的类也生成 Q{ClassName}.java ；但是类属性不支持 @QueryTransient 注解 -->
                                    <!--<processor>org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor</processor>-->
                                    <!-- 只支持 @QueryEntity 注解的类，生成Q{ClassName}.java，可通过 @QueryTransient 指定生成 Q{ClassName}.java 时忽略类属性；可选择性的生成 Q{ClassName}.java，不需要的类不加 @QueryEntity 即可，控制性比较高 -->
                                    <processor>com.querydsl.apt.QuerydslAnnotationProcessor</processor>
                                </processors>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- https://mvnrepository.com/artifact/com.querydsl/querydsl-maven-plugin -->
                <!--
                <plugin>
                    <groupId>com.querydsl</groupId>
                    <artifactId>querydsl-maven-plugin</artifactId>
                    <version>${project.version}</version>
                    <executions>
                        <execution>com.mysema.maven
                            <goals>
                                <goal>export</goal>
                            </goals>
                            <configuration>
                                <targetFolder>target/generated-sources/java</targetFolder>
                                <packageName></packageName>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <jdbcDriver>org.h2.Driver</jdbcDriver>
                        <jdbcUrl>jdbc:h2:mem:;INIT=runscript from 'file:${project.baseUri}/src/demo/sql/001_schema.sql'</jdbcUrl>
                        <jdbcUser>sa</jdbcUser>
                        <customTypes>
                            <customType>com.querydsl.sql.types.DateTimeType</customType>
                            <customType>com.querydsl.sql.types.LocalDateType</customType>
                        </customTypes>
                        <packageName>com.querydsl.demo.sql</packageName>
                        <targetFolder>${project.basedir}/target/generated-sources/java</targetFolder>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>com.h2database</groupId>
                            <artifactId>h2</artifactId>
                            <version>${h2.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>
                -->
                <!-- https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-maven-plugin -->
                <!--
                            <plugin>
                                <groupId>org.eclipse.jetty</groupId>
                                <artifactId>jetty-maven-plugin</artifactId>
                                <version>9.4.12.v20180830</version>
                            </plugin>
                -->
            </plugins>
        </pluginManagement>
    </build>
</project>