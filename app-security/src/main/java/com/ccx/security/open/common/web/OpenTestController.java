package com.ccx.security.open.common.web;
//
//import com.alibaba.fastjson.JSON;
//import com.alibaba.fastjson.JSONArray;
//import com.alibaba.fastjson.JSONObject;
//import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
//import com.google.common.collect.Lists;
//import com.support.mvc.entity.base.Item;
//import com.support.mvc.entity.base.Pager;
//import com.support.mvc.entity.base.Result;
//import com.support.mvc.enums.Code;
//import com.support.mvc.web.IController;
//import com.utils.util.Dates;
//import com.utils.util.Maps;
//import com.utils.util.Util;
//import io.swagger.annotations.Api;
//import io.swagger.annotations.ApiImplicitParam;
//import io.swagger.annotations.ApiOperation;
//import io.swagger.annotations.ApiParam;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Controller;
//import org.springframework.ui.ModelMap;
//import org.springframework.web.bind.annotation.*;
//import springfox.documentation.annotations.ApiIgnore;
//
//import java.util.List;
//import java.util.concurrent.ExecutorService;
//
///**
// * 测试接口
// *
// * @author 谢长春 on 2017-9-18
// */
//@Api(tags = "0.0.0")
//@RequestMapping("/open/test/{version}")
//@Controller
//@Slf4j
//public class OpenTestController implements IController<String> {
//
//    @Autowired
//    private ExecutorService multiThread;
//
//    @ApiIgnore
//    @GetMapping("/thymeleaf")
//    public String thymeleaf(ModelMap model) {
//        model.addAttribute("id", Util.uuid32());
//        model.addAttribute("name", "JX");
//        model.addAttribute("zh", "谢");
//        model.addAttribute("timestamp", Dates.now().formatDateTime());
//        return "/static/thymeleaf";
//    }
//
//    @ApiOperationSupport(order = 1)
//    @SuppressWarnings({"rawtypes", "unchecked"})
//    @ApiOperation(value = "获取枚举所有选项", tags = {"0.0.0"})
//    @GetMapping("/enum/{clazz}")
//    @ResponseBody
//    public Result<Item> codes(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version,
//            @ApiParam(required = true, value = "枚举类路径", example = "com.ccx.demo.business.user.entity.TabUser$OrderBy")
//            @PathVariable final String clazz
//    ) {
//        return new Result<Item>(1)
////                .setSuccess(Arrays.stream(Code.values()).map(Code::getObject).collect(Collectors.toList()))
//                .execute(result -> {
//                    try {
//                        final List<Item> items = Lists.newArrayList();
//                        final Class<Enum> enumClass = (Class<Enum>) Class.forName(clazz);
//                        for (Enum constant : enumClass.getEnumConstants()) {
//                            try {
//                                /*
//                                com.support.mvc.enums.Code
//                                com.ccx.demo.enums.Bool
//                                */
//                                items.add((Item) enumClass.getMethod("getObject").invoke(constant));
//                            } catch (NoSuchMethodException e) {
//                                /*
//                                com.ccx.demo.business.user.entity.TabUser$OrderBy
//                                */
//                                items.add(Item.builder().key(constant.name()).build());
//                            }
//                        }
//                        result.setSuccess(items);
//                    } catch (Exception e) {
//                        throw new RuntimeException(e.getMessage(), e);
//                    }
//                });
//    }
//
//    @ApiOperation(value = "测试 POST 保存：返回传入的参数", tags = {"0.0.0"})
//    @ApiImplicitParam(name = "body", dataType = "Item")
//    @ApiOperationSupport(order = 2, ignoreParameters = {"body.checked", "body.order.direction", "body.childs.order", "body.childs.childs"})
//    @PostMapping
//    @ResponseBody
//    @Override
//    public Result<Item> save(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version,
//            @RequestBody String body
//    ) {
//        return new Result<Item>(1).execute(result -> result
//                .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                .setSuccess(JSON.parseObject(body, Item.class))
//                .setExtras(JSON.parseObject(body))
//                .setException("参数解析成功，在data和extras都反回了参数")
//        );
//    }
//
//    @ApiOperation(value = "测试 PUT 全量更新：返回传入的参数", tags = {"0.0.0"})
//    @ApiImplicitParam(name = "body", dataType = "Item")
//    @ApiOperationSupport(order = 3, ignoreParameters = {"body.checked", "body.childs"})
//    @PutMapping("/{id}")
//    @ResponseBody
//    @Override
//    public Result<Item> update(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version,
//            @ApiParam(required = true, value = "数据id", example = "1") @PathVariable final String id,
//            @RequestBody(required = false) String body) {
//        return new Result<Item>(1).execute(result -> {
//            Item item = JSON.parseObject(body, Item.class);
//            item.setValue(id);
//            result
//                    .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                    .setSuccess(item)
//                    .setExtras(JSON.parseObject(JSON.toJSONString(item)))
//                    .setException("参数解析成功，在data和extras都反回了参数，数据ID：" + id)
//            ;
//        });
//    }
//
//    @ApiOperation(value = "测试 PATCH 部分更新：返回传入的参数", tags = {"0.0.0"})
//    @PatchMapping("/change/{id}")
//    @ResponseBody
//    public Result<?> change(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version,
//            @PathVariable final String id,
//            @RequestBody(required = false) String body
//    ) {
//        return update(version, id, body);
//    }
//
//    @ApiOperation(value = "测试 DELETE 按ID 删除：返回传入的参数", tags = {"0.0.0"})
//    @DeleteMapping("/{id}")
//    @ResponseBody
//    @Override
//    public Result<?> deleteById(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version, @PathVariable final String id) {
//        return new Result<JSONObject>(1).execute(result -> result
//                .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                .setSuccess(Maps.ofSS().put("id", id).buildJSONObject())
//                .setExtras(Maps.ofSS().put("id", id).buildJSONObject())
//                .setException(String.format("物理删除ID为【%s】的数据", id))
//        );
//    }
//
//    @ApiOperation(value = "测试 PATCH 逻辑删除：返回传入的参数", tags = {"0.0.0"})
//    @PatchMapping("/{id}")
//    @ResponseBody
//    @Override
//    public Result<?> markDeleteById(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version,
//            @PathVariable final String id) {
//        return new Result<JSONObject>(1).execute(result -> result
//                .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                .setSuccess(Maps.ofSS().put("id", id).buildJSONObject())
//                .setExtras(Maps.ofSS().put("id", id).buildJSONObject())
//                .setException(String.format("逻辑删除ID为【%s】的数据", id))
//        );
//    }
//
//    @ApiOperation(value = "测试 PATCH 批量逻辑删除：返回传入的参数", tags = {"0.0.0"})
//    @PatchMapping
//    @ResponseBody
//    @Override
//    public Result<?> markDelete(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version, @RequestBody(required = false) String body) {
//        return new Result<JSONObject>(1).execute(result -> result
//                .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                .setSuccess(Maps.of(String.class, JSONArray.class).put("ids", JSON.parseArray(body)).buildJSONObject())
//                .setExtras(Maps.of(String.class, JSONArray.class).put("ids", JSON.parseArray(body)).buildJSONObject())
//                .setException(String.format("批量逻辑删除ID为【%s】的数据", String.join(",", JSON.parseArray(body, String.class))))
//        );
//    }
//
//    @ApiOperation(value = "测试 GET 按 id 查询单条记录：返回传入的参数", tags = {"0.0.0"})
//    @GetMapping("/{id}")
//    @ResponseBody
//    @Override
//    public Result<?> findById(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version, @PathVariable final String id) {
//        return new Result<JSONObject>(1).execute(result -> result
//                .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                .setSuccess(Maps.ofSS().put("id", id).buildJSONObject())
//                .setExtras(Maps.ofSS().put("id", id).buildJSONObject())
//                .setException(String.format("查询ID为【%s】的数据", id))
//        );
//    }
//
//    @ApiOperation(value = "测试 GET 查询多条记录：返回传入的参数", tags = {"0.0.0"})
//    @GetMapping
//    @ResponseBody
//    @Override
//    public Result<?> search(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version, @RequestParam(required = false, defaultValue = "{}") final String json) {
//        return new Result<JSONObject>(1).execute(result -> result
//                .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                .setSuccess(JSON.parseObject(json))
//                .setExtras(JSON.parseObject(json))
//                .setException("带参查询集合，不分页")
//        );
//    }
//
//    @ApiOperation(value = "测试 GET 分页查询：返回传入的参数", tags = {"0.0.0"})
//    @GetMapping("/{number}/{size}")
//    @ResponseBody
//    @Override
//    public Result<?> page(
//            @ApiParam(required = true, value = "版本号", example = "1") @PathVariable final int version,
//            @PathVariable final int number,
//            @PathVariable final int size,
//            @RequestParam(required = false, defaultValue = "{}") final String json) {
//        return new Result<JSONObject>(1).execute(result -> result
//                .setCode(Code.SUCCESS) // 调用 setSuccess 时不需要设置 code 为 SUCCESS
//                .setSuccess(JSON.parseObject(json))
//                .setExtras(JSON.parseObject(JSON.toJSONString(Pager.builder().number(number).size(size).build())))
//                .setException("带参 + 分页查询集合")
//        );
//    }
//
//    @ApiOperation(value = "测试返回 xml-1", tags = {"0.0.0"})
//    @GetMapping(value = "/application/xml", produces = {"application/xml"})
//    @ResponseBody
//    public String getApplicationXml() {
//        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><table><header>表头</header><body><row><cell>第一列</cell><cell>第二列</cell></row><row><cell>第一列</cell><cell>第二列</cell></row></body></table>";
//    }
//
//    @ApiOperation(value = "测试返回 xml-2", tags = {"0.0.0"})
//    @GetMapping(value = "/text/xml", produces = {"text/xml"})
//    @ResponseBody
//    public String getTextXml() {
//        return "<?xml version=\"1.0\" encoding=\"UTF-8\"?><table><header><cell>第一列</cell><cell>第二列</cell></header><body><row><cell>第一行-第一列</cell><cell>第一行-第二列</cell></row><row><cell>第二行-第一列</cell><cell>第二行-第二列</cell></row></body></table>";
//    }
//
//    //    @Autowired
////    private UserRepository userRepository;
////
////    @PreAuthorize("hasRole('ADMIN')")
////    @GetMapping
////    @ResponseBody
////    public List<TabUser> getUsers(){
////        return userRepository.findAll();
////    }
////
////    @PostAuthorize("returnObject.username == principal.username or hasRole('ADMIN')")
////    @GetMapping("/{id}")
////    @ResponseBody
////    public TabUser getUser(@PathVariable String id){
////        return userRepository.findById(id).orElse(null);
////    }
////
////    @PostAuthorize("returnObject.username == principal.username or hasRole('ROLE_ADMIN')")
////    @GetMapping
////    @ResponseBody
////    public TabUser findByUsername(@RequestParam(value = "username") String username){
////        return userRepository.findByUsernameOrPhone(username,username);
////    }
//
//}